package ru.job4j.map;

import java.util.Map;

/**
 * 5. Изменение уже существующей записи в отображении.
 * В Java 8 в интерфейс Map<K, V> были добавлены особые методы, которые позволяют изменять записи в отображении
 * с помощь лямбда-выражений. Рассмотрим следующий метод:
 * V computeIfPresent (K key, BiFunction < ? super K, ? super V, ? extends V> remappingFunction)  -
 * если отображение содержит значение для указанного ключа и не равно null, выполняется вычисление нового
 * сопоставления ключ - значение с учетом исходного ключа и текущего сопоставленного значения.
 * Чтобы немного уяснить рассмотрим небольшой пример:
 * Map<Integer, String> map = new HashMap<>();
 * map.put(1, "root"); добавляем значение пару ключ-значение в отображение
 * System.out.println(map.get(1)); в консоль будет выведена строка root
 * map.computeIfPresent(1, (key, value) -> value + "@root"); изменяем значение которое ЕСТЬ в отображении
 * System.out.println(map.get(1)); в консоль будет выведена строка root@root
 * т.е. с помощью лямбда выражения мы получаем доступ к текущему значению, который сопоставлен с ключом,
 * который мы передали в метод (вычисление производит функциональный интерфейс BiFunction).
 *
 * Задание: метод принимает два отображения, которые имеют одинаковый размер:
 * 1. Ключ - тип Integer, значение - тип String. При этом значение - это Имя, ключ -
 * возрастающая последовательность, начиная с 1
 * 2. Ключ - тип Integer, значение - тип String. При этом значение - это Фамилия, ключ -
 * возрастающая последовательность, начиная с 1
 * Необходимо пройтись по первому отображению и к значению имени добавить значение фамилии,
 * чтобы на выходе получилось отображение - ключ(число) - значение(строка - имя + фамилия).
 */

public class ComputeIfPresent {
    public static Map<Integer, String> collectData(Map<Integer, String> name, Map<Integer, String> surname) {
        for (Integer index : name.keySet()) {
            name.computeIfPresent(index, (key, value) -> value + " " + surname.get(index));
        }
        return name;
    }
}